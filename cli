require_relative 'config/application'

module Cli
  class Basket < Thor
    class_option :verbose, :type => :boolean, :aliases => "-v"

    desc "add <product_code>", "Add product to the current initiated basket. Initialize a new basket if there is no current initiated"
    def add(product_code)
      BasketHandler.add(product_code)
    end

    desc "remove <product_code>", "Remove product from the current initiated basket"
    def remove(product_code)
      BasketHandler.remove(product_code)
    end

    desc "compute_total", "Compute total price of the basket"
    def compute_total
      BasketHandler.compute_total
    end

    desc "cancel", "Cancel the current initiated basket"
    def cancel
      BasketHandler.cancel
    end

    desc "complete", "Complete the current initiated basket. This means that the basket has been paid"
    def complete
      BasketHandler.complete
    end

    desc "show", "Show the current initiated basket"
    def show
      BasketHandler.show
    end
  end

  class Product < Thor
    class_option :verbose, :type => :boolean, :aliases => "-v"

    desc "list", "List all products"
    def list
      ProductsHandler.list
    end
  end

  class Discount < Thor
    class_option :verbose, :type => :boolean, :aliases => "-v"

    desc "list", "List all discounts"
    def list
      DiscountsHandler.list
    end
  end

  class Main < Thor
    class_option :verbose, :type => :boolean, :aliases => "-v"

    desc "basket SUBCOMMAND ...ARGS", "provides commands related to basket"
    subcommand "basket", Basket

    desc "product SUBCOMMAND ...ARGS", "provides commands related to products"
    subcommand "product", Product

    desc "discount SUBCOMMAND ...ARGS", "provides commands related to discounts"
    subcommand "discount", Discount

    desc "start", "Start the application"
    def start
      Application.start

      puts '''
        *************************************************
          * Welcome to the CASH REGISTRER application *
        *************************************************
        How to use it:
          1. Scan and add products: with the command `ruby cli basket scan <product_code>` add products to the basket
          2. Compute total: with the command `ruby cli basket compute_total` compute the total price of the basket

        What else can you do?
          1. view the current basket, type: `ruby cli basket show`
          2. cancel the current basket, type: `ruby cli basket cancel`
          3. complete the current basket, type: `ruby cli basket complete`
          4. view the list of products, type: `ruby cli product list`
          5. view the list of discounts, type: `ruby cli discount list`

        And to view the list of available commands, type: `ruby cli help`
      '''
    end
  end
end

Cli::Main.start(ARGV)
